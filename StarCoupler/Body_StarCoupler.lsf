deleteall;

cladding_mat = "SiO2 (Glass) - Palik";
film_mat = "Si (Silicon) - Palik";
theta_start = -theta_range/2;
theta_stop = theta_range/2;

# taper parameters
taper_left  = [0,  w_taper1/2; 0,  -w_taper1/2;  -l_taper1, -w_a/2;  -l_taper1, w_a/2];
taper_right = [0, w_taper2/2; 0, -w_taper2/2;  l_taper2, -w_a/2;  l_taper2, w_a/2];
theta_input_array = linspace(-theta_input*num_input/2,theta_input*num_input/2,num_input);
theta_out_array = linspace(-theta_output*num_output/2,theta_output*num_output/2,num_output);
theta = linspace(theta_start*pi/180,theta_stop*pi/180,res);
############################################
## add the clading;
if(isExport != 2)
{
    addrect;
    rect_name = "SiO2";
    set( "name", rect_name );
    set("x",x0+l_taper2/2-l_taper1/2 );
    set("x span",len+10e-6 );
    set("y",y0);
    set("y span",width + ext_length_y );
    set("z",z0);
    set("z span",height + ext_length_z);
    set("material","SiO2 (Glass) - Palik");
    set('alpha',0.2);
}
############################################
##add the left waveguide
for(i = 1:num_left)
{
    addrect;
    set('name','Input_'+num2str(i));
    set('x',r/2-(r+d1)/2*cos(-theta_input_array(i)*pi/180) );
    set('x span', d1+r);
    set('y',sin(-theta_input_array(i)*pi/180)*(r+d1)/2);
    set('y span', w_a);
    set('z span', h_a);
    set('first axis','z');
    set('rotation 1',-theta_input_array(i));
    set('material',film_mat);
    
    ##############################################
    # add taper
    addpoly;
    set('name','taper_left_'+num2str(i) );
    set('x', r/2-(r-70e-9)*cos(-theta_input_array(i)*pi/180));
    set('y', sin(-theta_input_array(i)*pi/180)*(r-40e-9) );
    set("z span",h_a);
    set("vertices",taper_left);
    set('first axis','z');
    set('rotation 1',-theta_input_array(i));
    set("material",film_mat);
    
}
############################################
##add right waveguide
for(i = 1:num_right)
{
    addrect;
    set('name','Output_'+num2str(i));
    set('x',-r/2+(r+d2)/2*cos(-theta_out_array(i)*pi/180) );
    set('x span', d2+r);
    set('y',sin(-theta_out_array(i)*pi/180)*(r+d2)/2);
    set('y span', w_a);
    set('z span', h_a);
    set('first axis','z');
    set('rotation 1',-theta_out_array(i)+180);
    set('material',film_mat);
    
    ###############################################
    ## add taper
    addpoly;
    set('name','taper_right_'+num2str(i) );
    set('x', cos(-theta_out_array(i)*pi/180)* (r-40e-9)-r/2 );
    set('y', sin(-theta_out_array(i)*pi/180)*(r-40e-9) );
    set("z span",h_a);
    set("vertices",taper_right);
    set('first axis','z');
    set('rotation 1',-theta_out_array(i));
    set("material",film_mat);
}

selectall;
addtogroup('In_out');

############################################
##add the Star couper core
V=matrix(2,res*4);  # vertices of polygon
V(1,1:res) = r*cos(theta);
V(2,1:res) = r*sin(theta);
# add polygon
addpoly;
set('name','Polygon_right');
set("x",-r/2);
set("y",0);
set("z span",h_a);
set("vertices",V);
set("material",film_mat);
#
V(1,1:res) = -r*cos(theta);
V(2,1:res) = r*sin(theta );
# add polygon
addpoly;
set('name','Polygon_left');
set("x",r/2);
set("y",0);
set("z span",h_a);
set("vertices",V);
set("material",film_mat);
# add rectangle
addrect;
set('name','core');
set("x",0);
set("y span",sin((theta_range/2)*pi/180)*r*2);
set("y",0);
set("x span",2*(r*cos(theta_range/2*pi/180)-r/2));
set("z span",h_a);
set("material",film_mat);

unselectall;
shiftselectpartial('Polygon');shiftselectpartial('core');set("alpha",0.35);
addtogroup('Middle');


############################################
#           simulation  code 1
############################################

if(type_simulation == 2)
{
    addeme;
}
else
{
    
    ############################################
    #     simulation 2
    ############################################
    if(type_simulation == 0)
    {
        addvarfdtd;
        set('x0',0);set('y0',0);
        set("test points",[ -len/2+1e-6, -width/2+1e-6; len/2-1e-6, width/2-1e-6]);
    }
    if(type_simulation == 1)
    {
        addfdtd;
        set("dimension",2);  #  1 = 2D, 2 = 3D
    }
    set("x",x0+l_taper2/2-l_taper1/2);
    set("x span",len);
    set("y",y0);
    set("y span",width);
    set("z",z0);
    set("z span", height);
    set("simulation time", time_simulation);
    set("auto shutoff min", 0.001);
    set("mesh accuracy",mesh_accuracy);
    
    ############################################
    #           source  code
    ############################################
    #add the source
    if(type_simulation == 0)
    {
        addmodesource;
    }
    if(type_simulation == 1)
    {
        addmode;
        set("z",0);
        set("z span",height-100e-9);
    }
    source_name = "source_";
    set( "name", source_name + num2str(1) );
    set("injection axis","x");
    set("x", x0+r/2-cos(-theta_input_array(1)*pi/180)*(r+l_taper1+l_a/2));
    set("y", sin(-theta_input_array(1)*pi/180)*(r+l_taper1+l_a/2) );
    set("y span",w_a*5);
    set("wavelength start",wl);
    set("wavelength stop",wl);
    ############################################
    
    ############################################
    #           Monitor  code
    ############################################
    #add the monitor xy plane
    addpower;
    set("name","profile_middle");
    set("monitor type",7);  # 1 = point, 2 = linear x, 3 = linear y, 4 = linear z, 5 = 2D x-normal, 6 = 2D y-normal, 7 = 2D z-normal, 8 = 3D
    set("x",x0+l_taper2/2-l_taper1/2);
    set("x span",len);
    set("y",y0);
    set("y span",width);
    set("z",z0-h_a/2);
    
    for(i = 1:num_output)
    {
        ############################################
        #add the monitor yz plane
        addpower;
        set("name","T"+num2str(i));
        set("monitor type",3);  # 1 = point, 2 = linear x, 3 = linear y, 4 = linear z, 5 = 2D x-normal, 6 = 2D y-normal, 7 = 2D z-normal, 8 = 3D
        set('x',-r/2+(r+d2*2/3)*cos(-theta_out_array(i)*pi/180) );
        set('y',sin(-theta_out_array(i)*pi/180)*(r+d2*2/3));
        set("y span",w_taper2);
        set("z",0);
        
        # Modeexpansion  code
        # add the monitor yz plane
        #add the mode expansion left
        addmodeexpansion;
        set("name","expansion"+"T"+num2str(i));
        set("monitor type","Linear Y");
        set('x',-r/2+(r+d2*2/3)*cos(-theta_out_array(i)*pi/180) );
        set('y',sin(-theta_out_array(i)*pi/180)*(r+d2*2/3));
        set("y span",w_taper2);
        set("z",z0);
        set('theta',-theta_out_array(i));
        # set the field monitor to be used by the expansion monitor
        setexpansion("T"+num2str(i), "T"+num2str(i));
        # select fundamental, fundamental TE or fundamental TM mode
        set("mode selection","fundamental mode");
    }
}

#save;

if (isExport == 2){
    groupscope('::model');
    selectall;
    addtogroup(filename);
    
    GDS_export;
}
