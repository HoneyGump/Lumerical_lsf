deleteall;
# taper parameters
taper_left  = [0,  w_taper1/2; 0,  -w_taper1/2;  -l_taper1, -w_a/2;  -l_taper1, w_a/2];
taper_right = [0, w_taper2/2; 0, -w_taper2/2;  l_taper2, -w_a/2;  l_taper2, w_a/2];
pos_left = -(num_left-1)*w_taper1/2+((1:1:num_left)-1)*w_taper1;
pos_right = -(num_right-1)*w_taper2/2+((1:1:num_right)-1)*w_taper2;
############################################
## add the clading;
if(isExport != 2)
{
    addrect;
    rect_name = "SiO2";
    set( "name", rect_name );
    set("x",x0+(l_taper2-l_taper1 )/2);
    set("x span",len+4e-6);
    set("y",y0);
    set("y span",width + ext_length_y );
    set("z",z0);
    set("z span",height + ext_length_z);
    set("material","SiO2 (Glass) - Palik");
    set('alpha',0.2);
}
############################################
##add the left waveguide
for(i = 1:num_left)
{
    ## add the taper left 1
    addpoly;
    set( "name", "taper_left_"+num2str(i) );
    set("x",x0-L_MMI/2);
    set("y",y0 + pos_left(i));
    set("vertices",taper_left);
    set("z",z0);
    set("z span",h_a);
    set("material","Si (Silicon) - Palik");
    
    addrect;
    rect_name = "WG_left_"+num2str(i);
    set( "name", rect_name);
    set("x max",x0-L_MMI/2-l_taper1);
    set("x min",x0-L_MMI/2-l_taper1-l_a*2);
    set("y",y0 + pos_left(i));
    set("y span",w_a);
    set("z",z0);
    set("z span",h_a);
    set("material","Si (Silicon) - Palik");
    
    
}
############################################
##add right waveguide
for(i = 1:num_right)
{
    ## add the taper right 1
    addpoly;
    set( "name", "taper_right_"+num2str(i) );
    set("x",x0+L_MMI/2);
    set("y",y0 +  pos_right(i));
    set("vertices",taper_right);
    set("z",z0);
    set("z span",h_a);
    set("material","Si (Silicon) - Palik");
    
    addrect;
    rect_name = "WG_right_"+num2str(i);
    set( "name", rect_name);
    set("x min",x0+L_MMI/2+l_taper2);
    set("x max",x0+L_MMI/2+l_taper2+l_a*2);
    set("y",y0 +  pos_right(i) );
    set("y span",w_a);
    set("z",z0);
    set("z span",h_a);
    set("material","Si (Silicon) - Palik");
    
    
}
############################################
##add the MMI core
addrect;
set( "name", "MMI_core" );
set("x",x0);
set("x span",L_MMI);
set("y",y0);
set("y span",W_MMI);
set("z",z0);
set("z span",h_a);
set("material","Si (Silicon) - Palik");
############################################

############################################
#           simulation  code 1
############################################

if(type_simulation == 2)
{
    addeme;
    #set("y min bc", "Anti-Symmetric");
    # set dimension
    set("x min",x0-L_MMI/2-l_taper1-l_a/2);
    set("y",0);
    set("y span",width);
    set("z",0);
    set("z span",height);
    set("disPlay cells",1);
    set("allow custom eigensolver settings",0);
    set("number of modes for all cell groups",20); 
    set("define y mesh by","maximum mesh step" );
    set("dy", 0.05e-6);
    set("define z mesh by","maximum mesh step" );
    set("dz", 0.05e-6);
    set("min mesh step",0.02e-6 );
    ############################################
    # set cell properties
    set("number of cell groups",5);
    set("group spans",[l_a/2; l_taper1; L_MMI; l_taper1; l_a/2]);
    set("cells",[1;30;1;30;1]);
    set("subcell method",[0;1;0;1;0]);   # 0 = none,  1 = CVCS
    ############################################
    # set up ports
    for(i = 1:num_left+num_right-2)
    {
        setactivesolver("EME");
        addemeport;
    }
    for( i = 1:num_left+num_right)
    {
        if(i<num_left+1)
        {
            select("EME::Ports::port_"+num2str(i));
            set("port location","left");
            set("use full simulation span",0);
            set("y",pos_left(i));
            set("y span",w_taper1);
            set("z",0);
            set("z span",height);
            set("mode selection","fundamental mode");
        }
        else
        {
            select("EME::Ports::port_"+num2str(i));
            set("port location","right");
            set("use full simulation span",0);#this is very important;
            set("y",pos_right(i-num_left));
            set("y span",w_taper2);# the width of port shouldn't too longer;
            set("z",0);
            set("z span",height);
            set("mode selection","fundamental mode");
        }
    }
    
    
    
    ############################################
    #           Monitor  code
    ############################################
    #add moniter 1
    addemeprofile;
    set("name","profile_middle");
    set("monitor type","2D Z-normal");
    set("x",0);
    set("x span",x0+L_MMI+2*l_taper1+l_a);
    set("y",0);
    set("y span",width);
    set("z",0);
    set("x resolution",300);
    ############################################
    
    #############################################
    ##           Mesh code
    #############################################
    ###add mesh left
    #for( i = 1:num_left+num_right)
    #{
    #addmesh;
    #if(i<num_left+1)
    #{
    #set("name","mesh_taper_left"+num2str(i));
    ## set dimension
    #set("x",x0-L_MMI/2-l_taper1/2);
    #set("x span",l_taper1);
    #set("y",y0+pos_left(i));
    #set("y span",w_taper1);
    #set("z",z0);
    #}
    #else
    #{
    #set("name","mesh_taper_right"+num2str(i));
    ## set dimension
    #set("x",x0+L_MMI/2+l_taper2/2);
    #set("x span",l_taper2);
    #set("y",y0+pos_right(i-num_left));
    #set("y span",w_taper2);
    #set("z",z0);
    #}
    #set("z span",h_a);
    ## enable in X direction and disable in Y,Z directions
    #set("override x mesh",0);
    #set("override y mesh",1);
    #set("override z mesh",1);
    ## restrict mesh by defining maximum step size
    #set("set maximum mesh step",1);
    ##set("dx",mesh_max);
    #set("dy",mesh_max);
    #set("dz",mesh_max);
    #}
}
else
{
    
    ############################################
    #     simulation 2
    ############################################
    if(type_simulation == 0)
    {
        addvarfdtd;
        set('x0',0);set('y0',0);
        set("test points",[ -len/2+1e-6, -width/2+1e-6; len/2-1e-6, width/2-1e-6]);
    }
    if(type_simulation == 1)
    {
        addfdtd;
        set("dimension",2);  #  1 = 2D, 2 = 3D
    }
    set("x",x0+l_taper2/2-l_taper1/2);
    set("x span",len );
    set("y",y0);
    set("y span",width);
    set("z",z0);
    set("z span", height);
    set("simulation time", time_simulation);
    set("auto shutoff min", 0.001);
    set("mesh accuracy",mesh_accuracy);
    
    ############################################
    #           source  code
    ############################################
    #add the source
    if(type_simulation == 0)
    {
        addmodesource;
    }
    if(type_simulation == 1)
    {
        addmode;
        set("z",0);
        set("z span",height-100e-9);
    }
    source_name = "source_";
    set( "name", source_name + num2str(1) );
    set("injection axis","x");
    set("x",x0-L_MMI/2-l_taper1-l_a/2);
    set("y", pos_left(1));
    set("y span",w_a*5);
    set("wavelength start",wl);
    set("wavelength stop",wl);
    ############################################
    
    ############################################
    #           Monitor  code
    ############################################
    #add the monitor xy plane
    addpower;
    set("name","profile_middle");
    set("monitor type",7);  # 1 = point, 2 = linear x, 3 = linear y, 4 = linear z, 5 = 2D x-normal, 6 = 2D y-normal, 7 = 2D z-normal, 8 = 3D
    set("x",(l_taper2-l_taper1)/2);
    set("x span",len);
    set("y",0);
    set("y span",width);
    set("z",0);
    ############################################
    #add the monitor yz plane
    for(i = 1:num_right)
    {
        addpower;
        set("name","T_right_"+num2str(i));
        if(type_simulation == 0)
        {
            set("monitor type",3);  # 1 = point, 2 = linear x, 3 = linear y, 4 = linear z, 5 = 2D x-normal, 6 = 2D y-normal, 7 = 2D z-normal, 8 = 3D
        }
        if(type_simulation == 1)
        {
            set("monitor type",5);  # 1 = point, 2 = linear x, 3 = linear y, 4 = linear z, 5 = 2D x-normal, 6 = 2D y-normal, 7 = 2D z-normal, 8 = 3D
            set("z span",height-100e-9);
        }
        set("x",L_MMI/2 + l_taper2+ l_a/2);
        set("y",pos_right(i));
        set("y span", w_taper2 );
        set("z",0);
        
    }
    for(i = 1:num_left)
    {
        addpower;
        set("name","R_left_"+num2str(i));
        if(type_simulation == 0)
        {
            set("monitor type",3);  # 1 = point, 2 = linear x, 3 = linear y, 4 = linear z, 5 = 2D x-normal, 6 = 2D y-normal, 7 = 2D z-normal, 8 = 3D
        }
        if(type_simulation == 1)
        {
            set("monitor type",5);  # 1 = point, 2 = linear x, 3 = linear y, 4 = linear z, 5 = 2D x-normal, 6 = 2D y-normal, 7 = 2D z-normal, 8 = 3D
            set("z span",height-100e-9);
        }
        set("x",-L_MMI/2 -l_taper1-l_a*3/4);
        set("y",pos_left(i));
        set("y span",w_taper1);
        set("z",0);
    }
    
    
    ############################################
    #           Modeexpansion  code
    ############################################
    #add the mode expansion left
    for(i = 1:num_right)
    {
        addmodeexpansion;
        set("name","expansion_T_"+num2str(i));
        if(type_simulation == 0)
        {
            set("monitor type",'Linear Y');  # 1 = point, 2 = linear x, 3 = linear y, 4 = linear z, 5 = 2D x-normal, 6 = 2D y-normal, 7 = 2D z-normal, 8 = 3D
        }
        if(type_simulation == 1)
        {
            set("monitor type","2D X-normal");
        }
        set("x",L_MMI/2 + l_taper2 +l_a/2);
        set("y",pos_right(i) );
        set("y span",w_taper2 );
        set("z",0);
        # set the field monitor to be used by the expansion monitor
        setexpansion('T'+num2str(i), 'T_right_'+num2str(i));
        # select fundamental, fundamental TE or fundamental TM mode
        set("mode selection","fundamental mode");
    }
    ############################################
    #add the mode expansion right
    for(i = 1:num_left)
    {
        addmodeexpansion;
        set("name","expansion_R_"+num2str(i));
        if(type_simulation == 0)
        {
            set("monitor type",'Linear Y');  # 1 = point, 2 = linear x, 3 = linear y, 4 = linear z, 5 = 2D x-normal, 6 = 2D y-normal, 7 = 2D z-normal, 8 = 3D
        }
        if(type_simulation == 1)
        {
            set("monitor type","2D X-normal");
        }
        set("x",-L_MMI/2 -l_taper1-l_a*3/4);
        set("y",pos_left(i));
        set("y span",w_taper1);
        set("z",0);
        # set the field monitor to be used by the expansion monitor
        setexpansion('R_'+num2str(i), "R_left_"+num2str(i));
        # select fundamental, fundamental TE or fundamental TM mode
        set("mode selection","fundamental mode");
    }
}

#save;

if (isExport == 2){
    groupscope('::model');
    selectall;
    addtogroup(filename);
    
    GDS_export;
}